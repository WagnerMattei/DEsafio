package com.eits.desafio.domain.service;

import java.time.LocalDate;

import org.directwebremoting.annotations.RemoteMethod;
import org.directwebremoting.annotations.RemoteProxy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.eits.desafio.domain.entity.Usuario;
import com.eits.desafio.domain.repository.IUsuariosRepository;
import com.eits.desafio.infraestructure.Mailer;

@Service 
@RemoteProxy(name = "usuarioService")
@Transactional
public class UsuarioService
{
	
	@Autowired 
	private IUsuariosRepository usuariosRepository;
	
	@Autowired
	private Mailer mailer;
	
	
	public String getMsg()
	{
		return "Hello World!!";
	}
	
	/**
	 * 
	 * @param usuario
	 * @return
	 */
	
	//INSERT//
	//metodo para inserção de novo usuario, com todas as validações necessárias
	@PreAuthorize("hasRole('ADMINISTRADOR')")
	public ResponseEntity<String> insert(Usuario usuario)
	{
		//Verifica se o objeto chegou vazio
		if (usuario.equals(null))
		{
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Usuario indefinido");
		}
		//Método que procura o email do usuario a ser cadastrado no banco
		// se encontrar retorna um erro de email em uso
		if ( usuariosRepository.findByEmail(usuario.getEmail()) != null)
		{
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Email ja cadastrado");
		}
		
		//Método que procura o cpf do usuario a ser cadastrado no banco
		// se encontrar retorna um erro de cpf ja cadastrado
		if ( usuariosRepository.findByCpf(usuario.getCpf()) != null)
		{
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("CPF ja cadastrado");
		}
		
		//Método que valida o CPF do usuario a ser cadastrado com base em calculos 
		//usando o digito verificador
		if (!usuario.isValidCPF(usuario.getCpf()))
		{
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("CPF inválido");
		}
		
		if ( !usuario.isValid() )
		{
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Senhas não conferem");
		}
		//Método que procura o nome do usuario a ser cadastrado no banco
		// se encontrar retorna um erro de nome ja cadastrado
		if (usuariosRepository.findByNome(usuario.getNome()) != null)
		{
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Nome ja cadastrado");
		}
		
		//Corpo do email a ser enviado
		String email = "Obrigado por relizar o cadastro\n "+ 
				   "Usuario: " + usuario.getEmail() +"\n"+ 
				   "Senha: " + usuario.getPassword()+ "\n" +
				   "Com permissões de "+ usuario.getPermissoes()+"\n"+
				   "----------------------------------------";
		String assunto = "Cadastro realizado com sucesso!";
		mailer.send(usuario.getEmail(), email, assunto); //envia email ao usuario recem cadastrado
		
		//Criptografa a senha do usuario Cadastrado
		String hash = new BCryptPasswordEncoder().encode(usuario.getPassword());
		
		//Seta a senha criptografada
		usuario.setSenha(hash);
		
		//Inicializa o usuario como ativo
		usuario.setAtivo(true);
		
		//seta o usuario criador 
		usuario.setCriador(getCurrent());
		
		//seta a data de cadastro
		usuario.setDataCadastro(LocalDate.now());

		usuariosRepository.save(usuario);	
		return ResponseEntity.status(HttpStatus.ACCEPTED).body("Usuário salvo com sucesso!");
	}
	
	/**
	 * 
	 * @param id
	 * @return
	 */
	//FIND BY ID//
	//metodo que retorna um usuario pelo id//
	public Usuario findById(long id)
	{
		 return usuariosRepository.findOne(id);
	}

	/**
	 * 
	 * @param page
	 * @param size
	 * @param property
	 * @param order
	 * @return
	 */
	
	//LIST//
	// Método que retorna a lista de usuarios
	public Page<Usuario> list(int page, int size, String property, String order) 
	{
		Direction asc;
		asc = Direction.ASC;
		PageRequest pageable = new PageRequest(page, size, asc, property);
		System.out.println(pageable);
		return usuariosRepository.findAll(pageable);
	}
	
	/**
	 * 
	 * @param usuario
	 * @return
	 */
	
	//UPDATE//
	//Método que altera um usuario
	@PreAuthorize("hasRole('ADMINISTRADOR')")
	public ResponseEntity<String> update(Usuario usuario)
	{
		//Verifica se o objeto chegou vazio
		if (usuario.equals(null))
		{
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Usuario indefinido");
		}
		
		Usuario usuarioAntigo = new Usuario();
		usuarioAntigo = usuariosRepository.findOne(usuario.getId());
		//Método que valida o CPF do usuario a ser cadastrado com base em calculos 
		//usando o digito verificador
		if (!usuario.isValidCPF(usuario.getCpf()))
		{
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("CPF inválido");
		}
		
		
		//Verifica se o nome do usuario é repetido
		if ((usuariosRepository.findByNome(usuario.getNome()) != null) )
		{
			if (!(usuarioAntigo.getNome().equals(usuario.getNome())))
			{
				return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Nome ja cadastrado");
			}
		}
		
		//Verifica se o cpf do usaurio é repetido
		if ((usuariosRepository.findByCpf(usuario.getCpf()) != null) )
		{
			if (!(usuarioAntigo.getCpf().equals(usuario.getCpf())))
			{
				return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("CPF ja cadastrado");
			}
		}
		
		//Verifica se o email do usuario é repetido
		if ((usuariosRepository.findByEmail(usuario.getEmail()) != null) )
		{
			if (!(usuarioAntigo.getEmail().equals(usuario.getEmail())))
			{
				return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("E-mail ja cadastrado");
			}
		}

		//Seta o usuario alterador
		usuario.setUltimoAlterador(getCurrent());
		
		//Seta a data de alteração
		usuario.setDataAlteracao(LocalDate.now());
		Usuario user = new Usuario();
		user = usuariosRepository.findOne(usuario.getId());
		usuario.setDataCadastro(user.getDataCadastro());
		
		usuario.setSenha(user.getSenha());	
		usuariosRepository.saveAndFlush(usuario);
		return ResponseEntity.status(HttpStatus.ACCEPTED).body("Usuário salvo com sucesso!");
	}
	
	/**
	 * 
	 * @return
	 */
	
	//GETCURRENT//
	//Método que pega o usuario cadastrado
	@RemoteMethod
	public Usuario getCurrent()
	{
		//Usuario userCurrent = (Usuario) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		return usuariosRepository.findByEmail("wagner.mattei@gmail.com");
	}
	
	/**
	 * 
	 * @param usuario
	 * @return
	 */
	
	//UPDATE USUARIO TO STATUS//
	//Método para alterar o status
	@PreAuthorize("hasRole('ADMINISTRADOR')")
	public ResponseEntity<String> updateUsuarioToStatus(Usuario usuario)
	{
		//Verifica se o objeto chegou vazio
		if (usuario.equals(null))
		{
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Usuario indefinido");
		}
		if(usuario.equals(getCurrent()))
		{
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Não é possivel desativar a si mesmo");
		}
		if ( usuario.isAtivo())
		{
			usuario.setAtivo(false);
		}
		else
		{
			usuario.setAtivo(true);
		}
		return update(usuario);
		
	}
	
	/**
	 * 
	 * @param filter
	 * @param page
	 * @param size
	 * @param property
	 * @param order
	 * @return
	 */
	//LIST USUARIOS BY FILTERS//
	//Metodo para filtrar usuarios
	public Page<Usuario> listUsuariosByFilters(String filter, int page, int size, String property, String order)
	{
		Direction asc;
		asc = Direction.ASC;
		PageRequest pageable = new PageRequest(page, size, asc, property);
		System.out.println(pageable);
		return usuariosRepository.listUsuariosByFilters(filter, pageable);
	}
	
	/**
	 * 
	 * @param usuario
	 */
	
	//UPDATE USUATIO TO SENHA//
	//metodo que altera a senha do usuario//
	@PreAuthorize("hasRole('ADMINISTRADOR')")
	public ResponseEntity<String> updateUsuarioToSenha(Usuario usuario) 
	{
		//Verifica se o objeto chegou vazio
		if (usuario.equals(null))
		{
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Usuario indefinido");
		}
		if ( !usuario.isValid() )
		{
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Senhas não conferem");
		}
		String hash = new BCryptPasswordEncoder().encode(usuario.getPassword());
		usuario.setSenha(hash);
		
		//Seta o usuario alterador
		usuario.setUltimoAlterador(getCurrent());
		
		//Seta a data de alteração
		usuario.setDataAlteracao(LocalDate.now());
		Usuario user = new Usuario();
		user = usuariosRepository.findOne(usuario.getId());
		usuario.setDataCadastro(user.getDataCadastro());
		usuariosRepository.saveAndFlush(usuario);
		return ResponseEntity.status(HttpStatus.ACCEPTED).body("Senha alterada com sucesso!");
	}

	
}