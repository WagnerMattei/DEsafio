package com.eits.desafio.domain.service;

import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;

import org.directwebremoting.annotations.RemoteProxy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.eits.desafio.domain.entity.Transacao;
import com.eits.desafio.domain.repository.ITransacoesRepository;
import com.eits.desafio.infraestructure.Mailer;

@Service 
@RemoteProxy
@Transactional
public class TransacaoService
{
	
	@Autowired 
	private ITransacoesRepository transacaoRepository;

	@Autowired
	private UsuarioService usuarioService;
	
	@Autowired
	private ContaService contaService;
	
	@Autowired
	private Mailer mailer;
	
 
	
	/**
	 * 
	 * @param transacao
	 * @return
	 * INSERT
	 */

	public Transacao insert(Transacao transacao)
	{
		if (transacao.getContaDestino().getNome().equals(transacao.getContaOrigem().getNome()))
		{
			throw new IllegalArgumentException("Contas de Origem e Destino não podem ser as mesmas");
		}
		transacao.setCriador(usuarioService.getCurrent()); 
		transacao.setDataCadastro(LocalDate.now());
		transacao.setEfetivado(false);
		return transacaoRepository.save(transacao);
		
	}
	
	/**
	 * 
	 * @param transacao
	 * @return
	 * UPDATE
	 */
	
	public Transacao update(Transacao transacao)
	{
		if (transacao.getContaDestino().getNome().equals(transacao.getContaOrigem().getNome()))
		{
			throw new IllegalArgumentException("Contas de Origem e Destino não podem ser as mesmas");
		}
		transacao.setDataAlteracao(LocalDate.now());
		Transacao novaTrans = new Transacao(); 
		novaTrans = transacaoRepository.findOne(transacao.getId());
		transacao.setDataCadastro(novaTrans.getDataCadastro());
		transacao.setUltimoAlterador(usuarioService.getCurrent());
		return transacaoRepository.saveAndFlush(transacao);
	}
	
	/**
	 * 
	 * @param transacao
	 * @return
	 * UPDATE TRANSACAO TO EFETIVADO
	 */
	
	public Transacao updateTransacaoToEfetivado(Transacao transacao)
	{
		if (transacao.isEfetivado())
		{
			throw new IllegalArgumentException("Transação ja efetivada");
		}
		//Verifica se o saldo é suficiente
		//Seta o saldo negativo minimo como -1000
		if ( transacao.getContaOrigem().getSaldo() < transacao.getValor()-1000 )
		{
			throw new IllegalArgumentException("Saldo insuficiente");
		}
		//Subtrai da conta de origem
		transacao.getContaOrigem().setSaldo(transacao.getContaOrigem().getSaldo() - transacao.getValor());
		
		//Soma a conta de destino
		transacao.getContaDestino().setSaldo(transacao.getContaDestino().getSaldo() + transacao.getValor());
		
		//Seta a transação como efetivada
		transacao.setEfetivado(true);
		
		//Seta o usuario que efetivou
		transacao.setEfetivador(usuarioService.getCurrent());
		
		//Seta a date de efetivacao
		transacao.setDataEfetivacao(LocalDate.now());
		
		//Atualiza as contas com o sald novo
		contaService.update(transacao.getContaDestino());
		contaService.update(transacao.getContaOrigem());
		
		
		//Envia email para o criador caso a transação seja efetivada com atraso
		if (transacao.getDataVencimento().before(Calendar.getInstance()))
		{
			transacao.getDataVencimento().add(Calendar.DATE, 0);
			SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy"); //Calendar
			String dataVencimentoFormatada = format.format(transacao.getDataVencimento().getTime()); //Calendar
			
			DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-LLLL-yyyy"); //LocalDate
			String dataEfetivacaoFormatada = transacao.getDataEfetivacao().format(formatter); //LocalDate
			String assunto = "Transação efetivada com atraso";
			String destino = transacao.getCriador().getEmail();
			String email = "Aviso!" + "\n" +
							"A transação no valor de " + transacao.getValor() + "Reais" + "\n" + "\n" +
							"De: " + transacao.getContaOrigem().getNome() + "\n" + "\n" +
							"Para: " + transacao.getContaDestino().getNome() + "\n" + "\n" +
							"Foi efetivada com atraso" + "\n" + "\n" +
							"Data de Efetivação: " + dataEfetivacaoFormatada + "\n" + "\n" +
							"Data de Vencimento: " + dataVencimentoFormatada + "\n" + "\n" + 
							"Esta é uma mensagem automatica, favor não responder";
			mailer.send(destino, email, assunto);
			System.out.println(destino);
			System.out.println(email);
			
			//envia o mesmo email para o efetivador caso nao seja a mesma pessoa que o criador,
			//para evitar de mandar email repetido
			if (!transacao.getCriador().equals(transacao.getEfetivador()))
			{
				destino = transacao.getEfetivador().getEmail();
				mailer.send(destino, email, assunto);
			}
		}	
						
		
		return update(transacao);
	}
	
	/**
	 * 
	 * @param id
	 * @return
	 * FIND BY ID
	 */

	public Transacao findById(long id)
	{
		 return transacaoRepository.findOne(id);

	}

	/**
	 * 
	 * @param page
	 * @param size
	 * @return
	 * LIST
	 */
	
	public Page<Transacao> list(int page, int size, String property, String order) 
	{
		Direction asc;
		asc = Direction.ASC;
		PageRequest pageable = new PageRequest(page, size, asc, property);
		return transacaoRepository.findAll(pageable);
	}
	
	/**
	 * 
	 * @param id
	 * REMOVE
	 */
	
	
	@PreAuthorize("hasRole('ADMINISTRADOR')")
	public void remove(Long id)
	{
		if (transacaoRepository.findOne(id).isEfetivado())
		{
			throw new IllegalArgumentException("Transações efetivadas não podem ser efetivadas");
		}
		this.transacaoRepository.delete(id);
	}
	
	/**
	 * 
	 * @param filter
	 * @param page
	 * @param size
	 * @param property
	 * @param order
	 * @return
	 */
	//LIST TRANSACOES BY FILTERS//
	//Metodo para filtrar transacoes
	public Page<Transacao> listTransacoesByFilter(String filter, int page, int size, String property, String order)
	{
		Direction asc;
		asc = Direction.ASC;
		PageRequest pageable = new PageRequest(page, size, asc, property);
		return transacaoRepository.listTransacoesByFilters(filter, pageable);
	}
	
}
	
	
	
	
	

	